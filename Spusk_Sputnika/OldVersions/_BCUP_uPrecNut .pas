unit uPrecNut;

interface

{ Алгоритмы вычисления матрицы прецессии и матрицы нутации

  Примечание: во всех формулах требуется момент времени t в шкале
  барицентрического динамического времени

  Переменная tc вычисляется лишний раз. Надо будет потом исправить этот
  момент }

uses
  uConstants, uMatrix_Operations, uEpheremides;

const
  rs = 4.848136811095E-6; { В этой постоянной хранится число для перевода
    дуговых секунд в радианную меру }

function ClcPrecAngels(t: double): TVector; // Вычисление параметров прецессии
function ClcPrecMatr(t: double): TMatrix; // Вычисление матрицы прецессии

function GetEpsMean(t: double): double; // Вычисление угла наклона эклиптики

function ClcNutMatr(t: double): TMatrix; // Вычисление матрицы нутации

function EarthRotMatr(S: double): TMatrix; // Матрица вращения Земли

implementation

{ Вычисление параметров прецессии

  Параметрами прецессии называются три угловые переменные: ζa(t), θa(t),
  za(t). Аргументом t для вычисления параметров прецессии является барицентри-
  ческое динамическое время TDB, выраженное в модифицированных юлианских
  днях (MJD).

  С помощью параметров прецессии вычисляют матрицу прецессии для преоб-
  разования от системы координат, соответствующей стандартной эпохе J2000.0, в
  систему подвижного экватора и мгновенной эклиптики, соответствующую задан-
  ной эпохе.

  Единица измерений параметров прецессии – радиан. }
function ClcPrecAngels(t: double): TVector;
var
  tc: double; { Вспомогательная переменная tc содержит время в юлианских
    столетиях, прошедшее от стандартной эпохи J2000.0, начало
    которой соответствует 1.5 января 2000 года }
begin

  tc := (t - 51544.5) / 36525;

  result[0] := rs * (2306.2181 + (0.30188 + 0.017998 * tc) * tc) * tc; // ζa(t)
  result[1] := rs * (2004.3109 - (0.42665 + 0.041833 * tc) * tc) * tc; // θa(t)
  result[2] := rs * (2306.2181 + (1.09468 + 0.018203 * tc) * tc) * tc; // za(t)

end;

{ Вычисление матрицы прецессии

  Матрица прецессии необходима для преобразования от системы координат,
  соответствующей стандартной эпохе J2000.0, в систему среднего подвижного
  экватора и мгновенной эклиптики, соответствующую заданной эпохе. }
function ClcPrecMatr(t: double): TMatrix;
var
  r_values: TVector; // Значения параметров прецессии
  R: array [0 .. 2] of TMatrix; // Три матрицы поворота
  Matrx: TMatrix;
begin

  r_values := ClcPrecAngels(t);

  { Здесь вычисляются три матрицы поворота }

  R[0] := RotMatr(-r_values[0]).z; // Rz(−ζa(t))
  R[1] := RotMatr(r_values[1]).y; // Ry(θa(t))
  R[2] := RotMatr(-r_values[2]).z; // Rz(−za(t))

  { Далее матрица прецессии получается последовательным перемножением этих
    трёх матриц поворота }
  Matrx := MultMatr(R[1], R[0]); // Вычисление части конечного выражения

  result := MultMatr(R[2], Matrx); // Результатом будет матрица

end;

{ Вычисление угла наклона эклиптики

  Числовое значение угла наклона мгновенной эклиптики к среднему подвижно-
  му экватору ε(t) , заданное на момент барицентрического динамического времени
  t , необходимо для вычисления матрицы нутации. }
function GetEpsMean(t: double): double;
var
  tc: double; { Вспомогательная переменная tc содержит время в юлианских
    столетиях, прошедшее от стандартной эпохи J2000.0, начало
    которой соответствует 1.5 января 2000 года }
begin

  tc := (t - 51544.5) / 36525;

  result := rs * (84381.448 - (46.815 + (0.0059 - 0.001813 * tc) * tc) * tc);

end;

{ Вычисление матрицы нутации

  Матрица нутации необходима для преобразования от системы координат, соот-
  ветствующей среднему подвижному экватору, в систему координат, соответству-
  ющей истинному экватору.

  Δψ — нутация в долготе,
  Δε — нутация в наклоне.

  Параметры нутации не вычисляются, а достаются из распознанного файла
  эферемид (DE405) с помощью функции Epheremides.GetEpheremides }
function ClcNutMatr(t: double): TMatrix;
var
  r_values: coordinates; // Параметров нутации
  R: array [0 .. 2] of TMatrix; // Три матрицы поворота
  Matrx: TMatrix;
  Eps // Переменная для хранения значения угла наклона эклиптики ε(t)
    : double;
begin

  r_values := Epheremides.GetEpheremides(t, true); { true означает, что
    получаем параметры нутации }

  Eps := GetEpsMean(t); { угол наклона мгновенной эклиптики к среднему
    подвижному экватору ε(t) }

  { Здесь вычисляются три матрицы поворота }
  with r_values do // x = Δψ (нутация в долготе), y = Δε (нутация в наклоне)
  begin
    R[0] := RotMatr(-Eps - y).x; // Rx(−ε − Δε)
    R[1] := RotMatr(-x).z; // Rz(−Δψ)
    R[2] := RotMatr(Eps).x; // Rx(ε)
  end;

  { Далее матрица нутации получается последовательным перемножением этих
    трёх матриц поворота }
  Matrx := MultMatr(R[1], R[2]); // Вычисление части конечного выражения

  result := MultMatr(R[0], Matrx); // Результатом будет матрица

end;

{ Матрица вращения Земли

  Матрица вращения Земли R является матрицей поворота вокруг оси OZ на
  угол, равный значению истинного звёздного времени S }
function EarthRotMatr(S: double): TMatrix;
begin

  result := RotMatr(S).z;

end;

end.
